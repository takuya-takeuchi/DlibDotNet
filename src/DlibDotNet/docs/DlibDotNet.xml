<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DlibDotNet</name>
    </assembly>
    <members>
        <member name="M:DlibDotNet.Array2D`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Array2D`1.Row`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Array2DMatrix`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Array2DMatrix`1.Row`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.Array`1">
            <summary>
            Represents a 1-Dimensional array of objects. 
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
        </member>
        <member name="M:DlibDotNet.Array`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Array`1"/> class.
            </summary>
        </member>
        <member name="M:DlibDotNet.Array`1.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Array`1"/> class with the specified size of array.
            </summary>
            <param name="size">The number of elements which have initial values for their type.</param>
        </member>
        <member name="M:DlibDotNet.Array`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Array`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:DlibDotNet.Array`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:DlibDotNet.Dlib">
            <summary>
            Provides the methods of dlib.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dlib.ExtractImage4Points``1(DlibDotNet.Array2D{``0},DlibDotNet.DPoint[],System.Int32,System.Int32)">
            <summary>
            This function extracts an arbitrary quadrilateral patch from an image.
            </summary>
            <typeparam name="T">The type of element in the image.</typeparam>
            <param name="image">The image.</param>
            <param name="points">The 4 points on the image.</param>
            <param name="width">The width of return image.</param>
            <param name="height">The height of return image.</param>
            <returns><see cref="T:DlibDotNet.Array2D`1"/>.</returns>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="points"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Array.Length"/> of <paramref name="points"/> must be 4.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="width"/> or <paramref name="height"/> are less than or equal to zero.</exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.ExtractImage4Points``1(DlibDotNet.Matrix{``0},DlibDotNet.DPoint[],System.Int32,System.Int32)">
            <summary>
            This function extracts an arbitrary quadrilateral patch from an matrix.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="matrix">The matrix.</param>
            <param name="points">The 4 points on the matrix.</param>
            <param name="width">The width of return matrix.</param>
            <param name="height">The height of return matrix.</param>
            <returns><see cref="T:DlibDotNet.Matrix`1"/>.</returns>
            <exception cref="T:System.ArgumentException">The specified type of matrix is not supported.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DlibDotNet.MatrixBase.TemplateRows"/> or <see cref="P:DlibDotNet.MatrixBase.TemplateColumns"/> is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> or <paramref name="points"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Array.Length"/> of <paramref name="points"/> must be 4.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="width"/> or <paramref name="height"/> are less than or equal to zero.</exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="matrix"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.GetFrontalFaceDetector">
            <summary>
            This function returns an object detector that is configured to find human faces that are looking towards the camera.
            </summary>
            <returns><see cref="T:DlibDotNet.FrontalFaceDetector"/>.</returns>
        </member>
        <member name="M:DlibDotNet.Dlib.LoadBmp``1(System.String)">
            <summary>
            This function loads Microsoft Windows Bitmap file into an <see cref="T:DlibDotNet.Array2D`1"/>.
            </summary>
            <typeparam name="T">The type of element in the image.</typeparam>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:DlibDotNet.Array2D`1"/>.</param>
            <returns>The <see cref="T:DlibDotNet.Array2D`1"/> this method creates.</returns>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
            <exception cref="T:DlibDotNet.ImageLoadException">Failed to load image on dlib.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.LoadDng``1(System.String)">
            <summary>
            This function loads DNG (Digital Negative) file into an <see cref="T:DlibDotNet.Array2D`1"/>.
            </summary>
            <typeparam name="T">The type of element in the image.</typeparam>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:DlibDotNet.Array2D`1"/>.</param>
            <returns>The <see cref="T:DlibDotNet.Array2D`1"/> this method creates.</returns>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
            <exception cref="T:DlibDotNet.ImageLoadException">Failed to load image on dlib.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.LoadImage``1(System.String)">
            <summary>
            This function loads image file into an <see cref="T:DlibDotNet.Array2D`1"/>.
            </summary>
            <typeparam name="T">The type of element in the image.</typeparam>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:DlibDotNet.Array2D`1"/>.</param>
            <returns>The <see cref="T:DlibDotNet.Array2D`1"/> this method creates.</returns>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
            <exception cref="T:DlibDotNet.ImageLoadException">Failed to load image on dlib.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.LoadImageAsMatrix``1(System.String)">
            <summary>
            This function loads image file into an <see cref="T:DlibDotNet.Matrix`1"/>.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:DlibDotNet.Matrix`1"/>.</param>
            <returns>The <see cref="T:DlibDotNet.Matrix`1"/> this method creates.</returns>
            <exception cref="T:System.ArgumentException">The specified type of matrix is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
            <exception cref="T:DlibDotNet.ImageLoadException">Failed to load image on dlib.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.LoadJpeg``1(System.String)">
            <summary>
            This function loads JPEG (Joint Photographic Experts Group) file into an <see cref="T:DlibDotNet.Array2D`1"/>.
            </summary>
            <typeparam name="T">The type of element in the image.</typeparam>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:DlibDotNet.Array2D`1"/>.</param>
            <returns>The <see cref="T:DlibDotNet.Array2D`1"/> this method creates.</returns>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
            <exception cref="T:DlibDotNet.ImageLoadException">Failed to load image on dlib.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.LoadPng``1(System.String)">
            <summary>
            This function loads PNG (Portable Network Graphics) file into an <see cref="T:DlibDotNet.Array2D`1"/>.
            </summary>
            <typeparam name="T">The type of element in the image.</typeparam>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:DlibDotNet.Array2D`1"/>.</param>
            <returns>The <see cref="T:DlibDotNet.Array2D`1"/> this method creates.</returns>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
            <exception cref="T:DlibDotNet.ImageLoadException">Failed to load image on dlib.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.LoadPng``1(System.Byte[])">
            <summary>
            This function loads PNG (Portable Network Graphics) file into an <see cref="T:DlibDotNet.Array2D`1"/>.
            </summary>
            <typeparam name="T">The type of element in the image.</typeparam>
            <param name="png">A byte array that contains png image data from which to create the <see cref="T:DlibDotNet.Array2D`1"/>.</param>
            <returns>The <see cref="T:DlibDotNet.Array2D`1"/> this method creates.</returns>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="png"/> is null.</exception>
            <exception cref="T:DlibDotNet.ImageLoadException">Failed to load image on dlib.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.SaveBmp(DlibDotNet.Array2DBase,System.String)">
            <summary>
            This function saves image to disk as Microsoft Windows Bitmap file.
            </summary>
            <param name="image">The image.</param>
            <param name="path">A string that contains the name of the file to which to save image.</param>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DlibDotNet.TwoDimensionObjectBase.Rows"/> or <see cref="P:DlibDotNet.TwoDimensionObjectBase.Columns"/> are less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.SaveBmp(DlibDotNet.MatrixBase,System.String)">
            <summary>
            This function saves matrix to disk as Microsoft Windows Bitmap file.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="matrix">The matrix.</param>
            <param name="path">A string that contains the name of the file to which to save matrix.</param>
            <exception cref="T:System.ArgumentException">The specified type of matrix is not supported.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DlibDotNet.MatrixBase.TemplateRows"/> or <see cref="P:DlibDotNet.MatrixBase.TemplateColumns"/> is not supported.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DlibDotNet.TwoDimensionObjectBase.Rows"/> or <see cref="P:DlibDotNet.TwoDimensionObjectBase.Columns"/> are less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> or <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="matrix"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.SaveDng(DlibDotNet.Array2DBase,System.String)">
            <summary>
            This function saves image to disk as DNG (Digital Negative) file.
            </summary>
            <param name="image">The image.</param>
            <param name="path">A string that contains the name of the file to which to save image.</param>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DlibDotNet.TwoDimensionObjectBase.Rows"/> or <see cref="P:DlibDotNet.TwoDimensionObjectBase.Columns"/> are less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.SaveDng(DlibDotNet.MatrixBase,System.String)">
            <summary>
            This function saves matrix to disk as DNG (Digital Negative) file.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="matrix">The matrix.</param>
            <param name="path">A string that contains the name of the file to which to save matrix.</param>
            <exception cref="T:System.ArgumentException">The specified type of matrix is not supported.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DlibDotNet.MatrixBase.TemplateRows"/> or <see cref="P:DlibDotNet.MatrixBase.TemplateColumns"/> is not supported.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DlibDotNet.TwoDimensionObjectBase.Rows"/> or <see cref="P:DlibDotNet.TwoDimensionObjectBase.Columns"/> are less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> or <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="matrix"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.SaveJpeg(DlibDotNet.Array2DBase,System.String,System.Int32)">
            <summary>
            This function saves image to disk as JPEG (Joint Photographic Experts Group) file.
            </summary>
            <param name="image">The image.</param>
            <param name="path">A string that contains the name of the file to which to save image.</param>
            <param name="quality">The quality of file. It must be 0 - 100. The default value is 75.</param>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DlibDotNet.TwoDimensionObjectBase.Rows"/> or <see cref="P:DlibDotNet.TwoDimensionObjectBase.Columns"/> are less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="quality"/> is less than zero or greater than 100.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.SaveJpeg(DlibDotNet.MatrixBase,System.String,System.Int32)">
            <summary>
            This function saves matrix to disk as JPEG (Joint Photographic Experts Group) file.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="matrix">The matrix.</param>
            <param name="path">A string that contains the name of the file to which to save matrix.</param>
            <param name="quality">The quality of file. It must be 0 - 100. The default value is 75.</param>
            <exception cref="T:System.ArgumentException">The specified type of matrix is not supported.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DlibDotNet.MatrixBase.TemplateRows"/> or <see cref="P:DlibDotNet.MatrixBase.TemplateColumns"/> is not supported.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DlibDotNet.TwoDimensionObjectBase.Rows"/> or <see cref="P:DlibDotNet.TwoDimensionObjectBase.Columns"/> are less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> or <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="quality"/> is less than zero or greater than 100.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="matrix"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.SavePng(DlibDotNet.Array2DBase,System.String)">
            <summary>
            This function saves image to disk as PNG (Portable Network Graphics) file.
            </summary>
            <param name="image">The image.</param>
            <param name="path">A string that contains the name of the file to which to save image.</param>
            <exception cref="T:System.ArgumentException">The specified type of image is not supported.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DlibDotNet.TwoDimensionObjectBase.Rows"/> or <see cref="P:DlibDotNet.TwoDimensionObjectBase.Columns"/> are less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dlib.SavePng(DlibDotNet.MatrixBase,System.String)">
            <summary>
            This function saves matrix to disk as PNG (Portable Network Graphics) file.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="matrix">The matrix.</param>
            <param name="path">A string that contains the name of the file to which to save matrix.</param>
            <exception cref="T:System.ArgumentException">The specified type of matrix is not supported.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DlibDotNet.MatrixBase.TemplateRows"/> or <see cref="P:DlibDotNet.MatrixBase.TemplateColumns"/> is not supported.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DlibDotNet.TwoDimensionObjectBase.Rows"/> or <see cref="P:DlibDotNet.TwoDimensionObjectBase.Columns"/> are less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> or <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="matrix"/> is disposed.</exception>
        </member>
        <member name="T:DlibDotNet.Cuda">
            <summary>
            Provides the methods of CUDA (Compute Unified Device Architecture).
            </summary>
        </member>
        <member name="M:DlibDotNet.Cuda.TryGetDriverVersion(System.Int32@)">
            <summary>
            Gets the value of driver version of CUDA.
            </summary>
            <param name="version">When this method returns, contains the value of driver version of CUDA.</param>
            <returns><code>true</code> if CUDA driver is installed and CUDA system returns valid value; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.Cuda.TryGetRuntimeVersion(System.Int32@)">
            <summary>
            Gets the value of runtime version of CUDA.
            </summary>
            <param name="version">When this method returns, contains the value of runtime version of CUDA.</param>
            <returns><code>true</code> if CUDA runtime is installed and CUDA system returns valid value; otherwise, <code>false</code>.</returns>
        </member>
        <member name="T:DlibDotNet.CudaException">
            <summary>
            The exception is general exception for CUDA (Compute Unified Device Architecture). This class cannot be inherited.
            </summary>
        </member>
        <member name="P:DlibDotNet.CudaException.DllName">
            <summary>
            Gets the library name which throw <see cref="T:DlibDotNet.CudaException"/>.
            </summary>
        </member>
        <member name="P:DlibDotNet.CudaException.DriverVersion">
            <summary>
            Gets the CUDA driver version.
            </summary>
        </member>
        <member name="P:DlibDotNet.CudaException.ErrorCode">
            <summary>
            Gets the CUDA error code.
            </summary>
        </member>
        <member name="P:DlibDotNet.CudaException.ErrorName">
            <summary>
            Gets the CUDA error name.
            </summary>
        </member>
        <member name="P:DlibDotNet.CudaException.ErrorMessage">
            <summary>
            Gets the CUDA error message.
            </summary>
        </member>
        <member name="P:DlibDotNet.CudaException.RuntimeVersion">
            <summary>
            Gets the CUDA runtime version.
            </summary>
        </member>
        <member name="T:DlibDotNet.ImageDatasetMetadata.Box">
            <summary>
            Represents an annotated rectangular area of an image. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDatasetMetadata.Box.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.ImageDatasetMetadata.Box"/> class.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDatasetMetadata.Box.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.ImageDatasetMetadata.Dataset">
            <summary>
            Represents a labeled set of images. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDatasetMetadata.Dataset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.ImageDatasetMetadata.Dataset"/> class.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDatasetMetadata.Dataset.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.ImageDatasetMetadata.Gender">
            <summary>
            The Gender enumeration specifies the distinction of sex.
            </summary>
        </member>
        <member name="F:DlibDotNet.ImageDatasetMetadata.Gender.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:DlibDotNet.ImageDatasetMetadata.Gender.Male">
            <summary>
            Male.
            </summary>
        </member>
        <member name="F:DlibDotNet.ImageDatasetMetadata.Gender.Female">
            <summary>
            Female.
            </summary>
        </member>
        <member name="T:DlibDotNet.ImageDatasetMetadata.Image">
            <summary>
            Represents an annotated image. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDatasetMetadata.Image.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.ImageDatasetMetadata.Image"/> class.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDatasetMetadata.Image.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.ImageDatasetMetadata.Image"/> class with a specified file name of image.
            </summary>
        </member>
        <member name="P:DlibDotNet.ImageDatasetMetadata.Image.Boxes">
            <summary>
            Gets a collection of annotated rectangular area of an image.
            </summary>
        </member>
        <member name="P:DlibDotNet.ImageDatasetMetadata.Image.FileName">
            <summary>
            Gets or sets the file name of image.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDatasetMetadata.Image.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.DlibObject">
            <summary>
            A class which has a pointer of native structure.
            </summary>
        </member>
        <member name="M:DlibDotNet.DlibObject.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.DlibObject"/> class with the specified value indicating whether this instance is disposable.
            </summary>
            <param name="isEnabledDispose">true if this instance is disposable; otherwise, false.</param>
        </member>
        <member name="P:DlibDotNet.DlibObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
            <returns>true if this instance has been disposed; otherwise, false.</returns>
        </member>
        <member name="P:DlibDotNet.DlibObject.IsEnableDispose">
            <summary>
            Gets a value indicating whether this instance is disposable.
            </summary>
            <returns>true if this instance is disposable; otherwise, false.</returns>
        </member>
        <member name="P:DlibDotNet.DlibObject.NativePtr">
            <summary>
            Gets a pointer of native structure.
            </summary>>
        </member>
        <member name="M:DlibDotNet.DlibObject.ThrowIfDisposed">
            <summary>
            If this object is disposed, then <see cref="T:System.ObjectDisposedException"/> is thrown.
            </summary>
        </member>
        <member name="M:DlibDotNet.DlibObject.DisposeManaged">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.DlibObject.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.DlibObject.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:DlibDotNet.DlibObject"/>.
            </summary>
        </member>
        <member name="M:DlibDotNet.DlibObject.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:DlibDotNet.DlibObject"/>.
            </summary>
            <param name="disposing">Indicate value whether <see cref="M:System.IDisposable.Dispose"/> method was called.</param>
        </member>
        <member name="M:DlibDotNet.Dnn.Adam.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.Dnn.Cuda">
            <summary>
            Provides the methods of CUDA (Compute Unified Device Architecture).
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.Cuda.TryGetDriverVersion(System.Int32@)">
            <summary>
            Gets the value of driver version of CUDA.
            </summary>
            <param name="version">When this method returns, contains the value of driver version of CUDA.</param>
            <returns><code>true</code> if CUDA driver is installed and CUDA system returns valid value; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.Dnn.Cuda.TryGetRuntimeVersion(System.Int32@)">
            <summary>
            Gets the value of runtime version of CUDA.
            </summary>
            <param name="version">When this method returns, contains the value of runtime version of CUDA.</param>
            <returns><code>true</code> if CUDA runtime is installed and CUDA system returns valid value; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.Dnn.DnnTrainer`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.InputRgbImagePyramid`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.Dnn.LossMetric">
            <summary>
            Represents a loss layer for a deep neural network to learn to map objects into a vector space where objects sharing the same class label are close to each other, while objects with different labels are far apart. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMetric.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Dnn.LossMetric"/> class with a specified network type of deep neural network.
            </summary>
            <param name="networkType">The network type.</param>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMetric.Train``1(DlibDotNet.Dnn.DnnTrainer{DlibDotNet.Dnn.LossMetric},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{``0}},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Trains a supervised neural network based on the given training data.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="trainer">The trainer object of <see cref="T:DlibDotNet.Dnn.LossMetric"/>.</param>
            <param name="data">The training data.</param>
            <param name="label">The label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trainer"/>, <paramref name="data"/> or <paramref name="label"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="trainer"/> is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The specified type of element in the matrix does not supported.</exception>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMetric.TrainOneStep``1(DlibDotNet.Dnn.DnnTrainer{DlibDotNet.Dnn.LossMetric},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{``0}},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Performs one stochastic gradient update step based on the mini-batch of data and labels supplied.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="trainer">The trainer object of <see cref="T:DlibDotNet.Dnn.LossMetric"/>.</param>
            <param name="data">The training data.</param>
            <param name="label">The label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trainer"/>, <paramref name="data"/> or <paramref name="label"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="trainer"/> is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The specified type of element in the matrix does not supported.</exception>
        </member>
        <member name="T:DlibDotNet.Dnn.LossMmod">
            <summary>
            Represents a loss layer for a deep neural network for the Max Margin Object Detection loss. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMmod.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Dnn.LossMmod"/> class with a specified network type of deep neural network.
            </summary>
            <param name="networkType">The network type.</param>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMmod.#ctor(DlibDotNet.Dnn.MModOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Dnn.LossMetric"/> class with a specified parameter and network type of deep neural network.
            </summary>
            <param name="options">The parameter.</param>
            <param name="networkType">The network type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="options"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMmod.Train``1(DlibDotNet.Dnn.DnnTrainer{DlibDotNet.Dnn.LossMmod},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{``0}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{DlibDotNet.MModRect}})">
            <summary>
            Trains a supervised neural network based on the given training data.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="trainer">The trainer object of <see cref="T:DlibDotNet.Dnn.LossMmod"/>.</param>
            <param name="data">The training data.</param>
            <param name="label">The label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trainer"/>, <paramref name="data"/> or <paramref name="label"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="trainer"/> is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The specified type of element in the matrix does not supported.</exception>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMmod.TrainOneStep``1(DlibDotNet.Dnn.DnnTrainer{DlibDotNet.Dnn.LossMmod},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{``0}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{DlibDotNet.MModRect}})">
            <summary>
            Performs one stochastic gradient update step based on the mini-batch of data and labels supplied.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="trainer">The trainer object of <see cref="T:DlibDotNet.Dnn.LossMmod"/>.</param>
            <param name="data">The training data.</param>
            <param name="label">The label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trainer"/>, <paramref name="data"/> or <paramref name="label"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="trainer"/> is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The specified type of element in the matrix does not supported.</exception>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMmod.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.Dnn.LossMulticlassLog">
            <summary>
            Represents a loss layer for a deep neural network for the multiclass logistic regression loss (e.g. negative log-likelihood loss), which is appropriate for multiclass classification problems. In particular, this class handles scalar outputs. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMulticlassLog.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Dnn.LossMulticlassLog"/> class with a specified network type of deep neural network.
            </summary>
            <param name="networkType">The network type.</param>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMulticlassLog.Train``1(DlibDotNet.Dnn.DnnTrainer{DlibDotNet.Dnn.LossMulticlassLog},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{``0}},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Trains a supervised neural network based on the given training data.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="trainer">The trainer object of <see cref="T:DlibDotNet.Dnn.LossMulticlassLog"/>.</param>
            <param name="data">The training data.</param>
            <param name="label">The label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trainer"/>, <paramref name="data"/> or <paramref name="label"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="trainer"/> is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The specified type of element in the matrix does not supported.</exception>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMulticlassLog.TrainOneStep``1(DlibDotNet.Dnn.DnnTrainer{DlibDotNet.Dnn.LossMulticlassLog},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{``0}},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Performs one stochastic gradient update step based on the mini-batch of data and labels supplied.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="trainer">The trainer object of <see cref="T:DlibDotNet.Dnn.LossMulticlassLog"/>.</param>
            <param name="data">The training data.</param>
            <param name="label">The label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trainer"/>, <paramref name="data"/> or <paramref name="label"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="trainer"/> is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The specified type of element in the matrix does not supported.</exception>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMulticlassLog.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.Dnn.LossMulticlassLogPerPixel">
            <summary>
            Represents a loss layer for a deep neural network for the multiclass logistic regression loss (e.g. negative log-likelihood loss), which is appropriate for multiclass classification problems. In particular, this class handles matrix outputs. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMulticlassLogPerPixel.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Dnn.LossMulticlassLogPerPixel"/> class with a specified network type of deep neural network.
            </summary>
            <param name="networkType">The network type.</param>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMulticlassLogPerPixel.Train``1(DlibDotNet.Dnn.DnnTrainer{DlibDotNet.Dnn.LossMulticlassLogPerPixel},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{``0}},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{System.UInt16}})">
            <summary>
            Trains a supervised neural network based on the given training data.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="trainer">The trainer object of <see cref="T:DlibDotNet.Dnn.LossMulticlassLogPerPixel"/>.</param>
            <param name="data">The training data.</param>
            <param name="label">The label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trainer"/>, <paramref name="data"/> or <paramref name="label"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="trainer"/> is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The specified type of element in the matrix does not supported.</exception>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMulticlassLogPerPixel.TrainOneStep``1(DlibDotNet.Dnn.DnnTrainer{DlibDotNet.Dnn.LossMulticlassLogPerPixel},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{``0}},System.Collections.Generic.IEnumerable{DlibDotNet.Matrix{System.UInt16}})">
            <summary>
            Performs one stochastic gradient update step based on the mini-batch of data and labels supplied.
            </summary>
            <typeparam name="T">The type of element in the matrix.</typeparam>
            <param name="trainer">The trainer object of <see cref="T:DlibDotNet.Dnn.LossMulticlassLogPerPixel"/>.</param>
            <param name="data">The training data.</param>
            <param name="label">The label.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trainer"/>, <paramref name="data"/> or <paramref name="label"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="trainer"/> is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The specified type of element in the matrix does not supported.</exception>
        </member>
        <member name="M:DlibDotNet.Dnn.LossMulticlassLogPerPixel.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.Dnn.MModOptions">
            <summary>
            This object contains all the parameters that control the behavior of <see cref="T:DlibDotNet.Dnn.LossMmod"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.NetResult`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.Dnn.NotSupportNetworkTypeException">
            <summary>
            The exception that is thrown when an specified network type is not supported. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.NotSupportNetworkTypeException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Dnn.NotSupportNetworkTypeException"/> class with a specified network type that is the cause of this exception.
            </summary>
            <param name="networkType">The network type.</param>
        </member>
        <member name="M:DlibDotNet.Dnn.NotSupportNetworkTypeException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Dnn.NotSupportNetworkTypeException"/> class with a specified network type, error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="networkType">The network type.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The name of the parameter that caused the current exception.</param>
        </member>
        <member name="P:DlibDotNet.Dnn.NotSupportNetworkTypeException.NetworkType">
            <summary>
            Gets the the network type that is the cause of this exception.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.PropagateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Dnn.PropagateException"/> class.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.ResizableTensor.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Dnn.Sgd.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.EnumerableDisposer`1.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:DlibDotNet.EnumerableDisposer`1.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
            <returns>true if this instance has been disposed; otherwise, false.</returns>
        </member>
        <member name="M:DlibDotNet.EnumerableDisposer`1.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:DlibDotNet.EnumerableDisposer`1"/>.
            </summary>
        </member>
        <member name="M:DlibDotNet.EnumerableDisposer`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:DlibDotNet.EnumerableDisposer`1"/>.
            </summary>
            <param name="disposing">Indicate value whether <see cref="M:System.IDisposable.Dispose"/> method was called.</param>
        </member>
        <member name="T:DlibDotNet.Extensions.GrayscalLumaCoefficients">
            <summary>
            Define the standard for converting RGB values to luminance when gray-scaled.
            </summary>
        </member>
        <member name="F:DlibDotNet.Extensions.GrayscalLumaCoefficients.ITU_R_BT_601">
            <summary>
            Operate gray-scaled by BT.601 of ITU-R (ITU Radiocommunication Sector) Recommendation. Luminance of formula is 0.299 R + 0.587 G + 0.114 B.
            </summary>
        </member>
        <member name="F:DlibDotNet.Extensions.GrayscalLumaCoefficients.ITU_R_BT_709">
            <summary>
            Operate gray-scaled by BT.709 of ITU-R (ITU Radiocommunication Sector) Recommendation. Luminance of formula is 0.2126 R + 0.7152 G + 0.0722 B.
            </summary>
        </member>
        <member name="F:DlibDotNet.Extensions.GrayscalLumaCoefficients.SMPTE_240M">
            <summary>
            Operate gray-scaled by 240M specification SMPTER (Society of Motion Picture and Television Engineers) established. Luminance of formula is 0.212 R + 0.701 G + 0.087 B.
            </summary>
        </member>
        <member name="T:DlibDotNet.DPoint">
            <summary>
            Represents an ordered pair of double-precision floating-point x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:DlibDotNet.DPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.DPoint"/> class with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="P:DlibDotNet.DPoint.X">
            <summary>
            Gets or sets the x-coordinate of this <see cref="T:DlibDotNet.DPoint"/>.
            </summary>
            <value>The x-coordinate of this <see cref="T:DlibDotNet.DPoint"/>.</value>
        </member>
        <member name="P:DlibDotNet.DPoint.Y">
            <summary>
            Gets or sets the x-coordinate of this <see cref="T:DlibDotNet.DPoint"/>.
            </summary>
            <value>The x-coordinate of this <see cref="T:DlibDotNet.DPoint"/>.</value>
        </member>
        <member name="M:DlibDotNet.DPoint.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:DlibDotNet.DPoint"/> contains the same coordinates as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:DlibDotNet.DPoint"/> and has the same coordinates as this <see cref="T:DlibDotNet.DPoint"/>.</returns>
        </member>
        <member name="M:DlibDotNet.DPoint.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:DlibDotNet.DPoint"/>.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:DlibDotNet.DPoint"/>.</returns>
        </member>
        <member name="M:DlibDotNet.DPoint.op_Equality(DlibDotNet.DPoint,DlibDotNet.DPoint)">
            <summary>
            Compares two <see cref="T:DlibDotNet.DPoint"/> objects. The result specifies whether the values of the <see cref="P:DlibDotNet.DPoint.X"/> and <see cref="P:DlibDotNet.DPoint.Y"/> properties of the two <see cref="T:DlibDotNet.DPoint"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.DPoint"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.DPoint"/> to compare.</param>
            <returns><code>true</code> if the <see cref="P:DlibDotNet.DPoint.X"/> and <see cref="P:DlibDotNet.DPoint.Y"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.DPoint.op_Inequality(DlibDotNet.DPoint,DlibDotNet.DPoint)">
            <summary>
            Compares two <see cref="T:DlibDotNet.DPoint"/> objects. The result specifies whether the values of the <see cref="P:DlibDotNet.DPoint.X"/> or <see cref="P:DlibDotNet.DPoint.Y"/> properties of the two <see cref="T:DlibDotNet.DPoint"/> objects are unequal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.DPoint"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.DPoint"/> to compare.</param>
            <returns><code>true</code> if the values of either the <see cref="P:DlibDotNet.DPoint.X"/> properties or the <see cref="P:DlibDotNet.DPoint.Y"/> properties of <paramref name="left"/> and <paramref name="right"/> differ; otherwise, <code>false</code>.</returns>
        </member>
        <member name="T:DlibDotNet.Point">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:DlibDotNet.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.Point"/> class with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="P:DlibDotNet.Point.X">
            <summary>
            Gets or sets the x-coordinate of this <see cref="T:DlibDotNet.Point"/>.
            </summary>
            <value>The x-coordinate of this <see cref="T:DlibDotNet.Point"/>.</value>
        </member>
        <member name="P:DlibDotNet.Point.Y">
            <summary>
            Gets or sets the y-coordinate of this <see cref="T:DlibDotNet.Point"/>.
            </summary>
            <value>The y-coordinate of this <see cref="T:DlibDotNet.Point"/>.</value>
        </member>
        <member name="M:DlibDotNet.Point.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:DlibDotNet.Point"/> contains the same coordinates as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:DlibDotNet.Point"/> and has the same coordinates as this <see cref="T:DlibDotNet.Point"/>.</returns>
        </member>
        <member name="M:DlibDotNet.Point.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:DlibDotNet.Point"/>.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:DlibDotNet.Point"/>.</returns>
        </member>
        <member name="M:DlibDotNet.Point.ToString">
            <summary>
            Converts this <see cref="T:DlibDotNet.Point"/> to a human-readable string.
            </summary>
            <returns>A string that represents this <see cref="T:DlibDotNet.Point"/>.</returns>
        </member>
        <member name="M:DlibDotNet.Point.op_Equality(DlibDotNet.Point,DlibDotNet.Point)">
            <summary>
            Compares two <see cref="T:DlibDotNet.Point"/> objects. The result specifies whether the values of the <see cref="P:DlibDotNet.Point.X"/> and <see cref="P:DlibDotNet.Point.Y"/> properties of the two <see cref="T:DlibDotNet.Point"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.Point"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.Point"/> to compare.</param>
            <returns><code>true</code> if the <see cref="P:DlibDotNet.Point.X"/> and <see cref="P:DlibDotNet.Point.Y"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.Point.op_Inequality(DlibDotNet.Point,DlibDotNet.Point)">
            <summary>
            Compares two <see cref="T:DlibDotNet.Point"/> objects. The result specifies whether the values of the <see cref="P:DlibDotNet.Point.X"/> or <see cref="P:DlibDotNet.Point.Y"/> properties of the two <see cref="T:DlibDotNet.Point"/> objects are unequal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.Point"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.Point"/> to compare.</param>
            <returns><code>true</code> if the values of either the <see cref="P:DlibDotNet.Point.X"/> properties or the <see cref="P:DlibDotNet.Point.Y"/> properties of <paramref name="left"/> and <paramref name="right"/> differ; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.Point.NativePoint.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.PointRotator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.PointTransform.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.PointTransformAffine.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.PointTransformProjective.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.RectangleTransform.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Vector`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.SamplePair.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.MenuItemSeparator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.MenuItemText.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ClickActionMediator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.CustomDrawableWindow.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDisplayOverlayRectActionMediator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.PerspectiveWindow.OverlayDot.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.PerspectiveWindow.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageWindow.OverlayLine.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,System.Byte)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Byte"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,System.UInt16)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.UInt16"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,System.UInt32)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.UInt32"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,System.SByte)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.SByte"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,System.Int16)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Int16"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,System.Int32)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Int32"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,System.Single)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Single"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,System.Double)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Double"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,DlibDotNet.RgbPixel)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:DlibDotNet.RgbPixel"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,DlibDotNet.RgbAlphaPixel)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:DlibDotNet.RgbAlphaPixel"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,DlibDotNet.HsiPixel)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:DlibDotNet.HsiPixel"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.Rectangle,DlibDotNet.LabPixel)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.Rectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:DlibDotNet.LabPixel"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,System.Byte)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Byte"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,System.UInt16)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.UInt16"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,System.UInt32)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.UInt32"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,System.SByte)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.SByte"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,System.Int16)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Int16"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,System.Int32)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Int32"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,System.Single)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Single"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,System.Double)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:System.Double"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,DlibDotNet.RgbPixel)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:DlibDotNet.RgbPixel"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,DlibDotNet.RgbAlphaPixel)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:DlibDotNet.RgbAlphaPixel"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,DlibDotNet.HsiPixel)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:DlibDotNet.HsiPixel"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.AddOverlay(DlibDotNet.DRectangle,DlibDotNet.LabPixel)">
            <summary>
            Adds the given overlay rectangle into this object such that it will be displayed. 
            </summary>
            <param name="rect">A <see cref="T:DlibDotNet.DRectangle"/> structure that represents the rectangle to be displayed.</param>
            <param name="color">A <see cref="T:DlibDotNet.LabPixel"/> value that represents a color.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:DlibDotNet.ImageWindow"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.ImageWindow.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.SelectIndexedActionMediator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.StringActionMediator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.VoidActionMediator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDisplay.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageDisplay.OverlayRect.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Label.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ListBox.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.MenuBar.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.TextField.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.IDlibObject">
            <summary>
            Defines methods and properties to represent the dlib objects.
            </summary>
        </member>
        <member name="P:DlibDotNet.IDlibObject.NativePtr">
            <summary>
            Gets a pointer of native structure.
            </summary>>
        </member>
        <member name="M:DlibDotNet.IDlibObject.ThrowIfDisposed">
            <summary>
            If this object is disposed, then <see cref="T:System.ObjectDisposedException"/> is thrown.
            </summary>
        </member>
        <member name="M:DlibDotNet.InterestPoint.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.SurfPoint.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.ImageLoadException">
            <summary>
            The exception is general exception for image loading on dlib. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:DlibDotNet.ImageLoadException.FilePath">
            <summary>
            Gets the file path which occurs error.
            </summary>
        </member>
        <member name="T:DlibDotNet.ImagePixelFormat">
            <summary>
            The ImagePixelFormat enumeration specifies the format of the color data for each pixel in the image.
            </summary>
        </member>
        <member name="F:DlibDotNet.ImagePixelFormat.Bgr">
            <summary>
            The pixel format is B8G8R8 unsigned integer.
            </summary>
        </member>
        <member name="F:DlibDotNet.ImagePixelFormat.Bgra">
            <summary>
            The pixel format is B8G8R8A8 unsigned integer.
            </summary>
        </member>
        <member name="F:DlibDotNet.ImagePixelFormat.Rgb">
            <summary>
            The pixel format is R8G8B8 unsigned integer.
            </summary>
        </member>
        <member name="F:DlibDotNet.ImagePixelFormat.Rgba">
            <summary>
            The pixel format is R8G8B8A8 unsigned integer.
            </summary>
        </member>
        <member name="M:DlibDotNet.CorrelationTracker.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.FrontalFaceDetector.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.FullDetection.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.FullObjectDetection.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.MModRect.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ObjectDetector`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.RectDetection.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ScanFHogPyramid`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ShapePredictor.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ShapePredictorTrainer.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.TestBoxOverlap.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ChipDetails.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ChipDims.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.HoughTransform.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.PyramidDown.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ImageTransforms.RandomCropper.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.CustomLogger.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Logger.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Matrix`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.MatrixOp.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.MatrixRangeExp`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.BgrPixel">
            <summary>
            Represents an BGR color value.
            </summary>
        </member>
        <member name="F:DlibDotNet.BgrPixel.Blue">
            <summary>
            Gets or sets the blue component of the color of this <see cref="T:DlibDotNet.BgrPixel"/>.
            </summary>
            <value>The blue component of the color of this <see cref="T:DlibDotNet.BgrPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.BgrPixel.Green">
            <summary>
            Gets or sets the green component of the color of this <see cref="T:DlibDotNet.BgrPixel"/>.
            </summary>
            <value>The green component of the color of this <see cref="T:DlibDotNet.BgrPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.BgrPixel.Red">
            <summary>
            Gets or sets the red component of the color of this <see cref="T:DlibDotNet.BgrPixel"/>.
            </summary>
            <value>The red component of the color of this <see cref="T:DlibDotNet.BgrPixel"/>.</value>
        </member>
        <member name="M:DlibDotNet.BgrPixel.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.BgrPixel"/> class with the specified BGR color value.
            </summary>
            <param name="blue">The blue component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="red">The red component of the color.</param>
        </member>
        <member name="M:DlibDotNet.BgrPixel.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:DlibDotNet.BgrPixel"/> contains the same BGR color value as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:DlibDotNet.BgrPixel"/> and has the same BGR color value as this <see cref="T:DlibDotNet.BgrPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.BgrPixel.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:DlibDotNet.BgrPixel"/>.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:DlibDotNet.BgrPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.BgrPixel.op_Equality(DlibDotNet.BgrPixel,DlibDotNet.BgrPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.BgrPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.BgrPixel.Blue"/>, <see cref="F:DlibDotNet.BgrPixel.Green"/> and <see cref="F:DlibDotNet.BgrPixel.Red"/> properties of the two <see cref="T:DlibDotNet.BgrPixel"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.BgrPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.BgrPixel"/> to compare.</param>
            <returns><code>true</code> if the <see cref="F:DlibDotNet.BgrPixel.Blue"/>, <see cref="F:DlibDotNet.BgrPixel.Green"/> and <see cref="F:DlibDotNet.BgrPixel.Red"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.BgrPixel.op_Inequality(DlibDotNet.BgrPixel,DlibDotNet.BgrPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.BgrPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.BgrPixel.Blue"/>, <see cref="F:DlibDotNet.BgrPixel.Green"/> or <see cref="F:DlibDotNet.BgrPixel.Red"/> properties of the two <see cref="T:DlibDotNet.BgrPixel"/> objects are unequal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.BgrPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.BgrPixel"/> to compare.</param>
            <returns><code>true</code> if the values of either the <see cref="F:DlibDotNet.BgrPixel.Red"/> properties or the <see cref="F:DlibDotNet.BgrPixel.Green"/> properties or the <see cref="F:DlibDotNet.BgrPixel.Blue"/> properties of <paramref name="left"/> and <paramref name="right"/> differ; otherwise, <code>false</code>.</returns>
        </member>
        <member name="T:DlibDotNet.HsiPixel">
            <summary>
            Represents an HSI color space value.
            </summary>
        </member>
        <member name="F:DlibDotNet.HsiPixel.H">
            <summary>
            Gets or sets the hue component of this <see cref="T:DlibDotNet.HsiPixel"/>.
            </summary>
            <value>The hue component of this <see cref="T:DlibDotNet.HsiPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.HsiPixel.S">
            <summary>
            Gets or sets the saturation component of this <see cref="T:DlibDotNet.HsiPixel"/>.
            </summary>
            <value>The saturation component of this <see cref="T:DlibDotNet.HsiPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.HsiPixel.I">
            <summary>
            Gets or sets the intensity component of this <see cref="T:DlibDotNet.HsiPixel"/>.
            </summary>
            <value>The intensity component of this <see cref="T:DlibDotNet.HsiPixel"/>.</value>
        </member>
        <member name="M:DlibDotNet.HsiPixel.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.HsiPixel"/> class with the specified HSI color space value.
            </summary>
            <param name="hue">The the hue component of the color space.</param>
            <param name="saturation">The saturation component of the color space.</param>
            <param name="intensity">The intensity component of the color space.</param>
        </member>
        <member name="M:DlibDotNet.HsiPixel.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:DlibDotNet.HsiPixel"/> contains the same  HSI color space value as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:DlibDotNet.HsiPixel"/> and has the same  HSI color space value as this <see cref="T:DlibDotNet.HsiPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.HsiPixel.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:DlibDotNet.HsiPixel"/>.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:DlibDotNet.HsiPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.HsiPixel.op_Equality(DlibDotNet.HsiPixel,DlibDotNet.HsiPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.HsiPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.HsiPixel.H"/>, <see cref="F:DlibDotNet.HsiPixel.S"/> and <see cref="F:DlibDotNet.HsiPixel.I"/> properties of the two <see cref="T:DlibDotNet.HsiPixel"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.HsiPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.HsiPixel"/> to compare.</param>
            <returns><code>true</code> if the <see cref="F:DlibDotNet.HsiPixel.H"/>, <see cref="F:DlibDotNet.HsiPixel.S"/> and <see cref="F:DlibDotNet.HsiPixel.I"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.HsiPixel.op_Inequality(DlibDotNet.HsiPixel,DlibDotNet.HsiPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.HsiPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.HsiPixel.H"/>, <see cref="F:DlibDotNet.HsiPixel.S"/> or <see cref="F:DlibDotNet.HsiPixel.I"/> properties of the two <see cref="T:DlibDotNet.HsiPixel"/> objects are unequal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.HsiPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.HsiPixel"/> to compare.</param>
            <returns><code>true</code> if the values of either the <see cref="F:DlibDotNet.HsiPixel.H"/> properties or the <see cref="F:DlibDotNet.HsiPixel.S"/> properties or the <see cref="F:DlibDotNet.HsiPixel.I"/> properties of <paramref name="left"/> and <paramref name="right"/> differ; otherwise, <code>false</code>.</returns>
        </member>
        <member name="T:DlibDotNet.LabPixel">
            <summary>
            Represents an Lab colored graphical pixel.
            </summary>
        </member>
        <member name="F:DlibDotNet.LabPixel.L">
            <summary>
            Gets or sets a lightness component of this <see cref="T:DlibDotNet.LabPixel"/>.
            </summary>
            <value>The lightness component of this <see cref="T:DlibDotNet.LabPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.LabPixel.A">
            <summary>
            Gets or sets the component corresponds to between green to red component of this <see cref="T:DlibDotNet.LabPixel"/>.
            </summary>
            <value>The component corresponds to between green to red component of this <see cref="T:DlibDotNet.LabPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.LabPixel.B">
            <summary>
            Gets or sets the component corresponds to between blue to yellow component of this <see cref="T:DlibDotNet.LabPixel"/>.
            </summary>
            <value>The component corresponds to between blue to yellow component of this <see cref="T:DlibDotNet.LabPixel"/>.</value>
        </member>
        <member name="M:DlibDotNet.LabPixel.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.LabPixel"/> class with the specified Lab color value.
            </summary>
            <param name="l">The lightness component of the color.</param>
            <param name="a">The component corresponds to between green to red component of the color.</param>
            <param name="b">The component corresponds to between blue to yellow component of the color.</param>
        </member>
        <member name="M:DlibDotNet.LabPixel.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:DlibDotNet.LabPixel"/> contains the same RGB color value as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:DlibDotNet.LabPixel"/> and has the same RGB color value as this <see cref="T:DlibDotNet.LabPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.LabPixel.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:DlibDotNet.LabPixel"/>.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:DlibDotNet.LabPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.LabPixel.op_Equality(DlibDotNet.LabPixel,DlibDotNet.LabPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.LabPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.LabPixel.L"/>, <see cref="F:DlibDotNet.LabPixel.A"/> and <see cref="F:DlibDotNet.LabPixel.B"/> properties of the two <see cref="T:DlibDotNet.LabPixel"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.LabPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.LabPixel"/> to compare.</param>
            <returns><code>true</code> if the <see cref="F:DlibDotNet.LabPixel.L"/>, <see cref="F:DlibDotNet.LabPixel.A"/> and <see cref="F:DlibDotNet.LabPixel.B"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.LabPixel.op_Inequality(DlibDotNet.LabPixel,DlibDotNet.LabPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.LabPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.LabPixel.L"/>, <see cref="F:DlibDotNet.LabPixel.A"/> or <see cref="F:DlibDotNet.LabPixel.B"/> properties of the two <see cref="T:DlibDotNet.LabPixel"/> objects are unequal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.LabPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.LabPixel"/> to compare.</param>
            <returns><code>true</code> if the values of either the <see cref="F:DlibDotNet.LabPixel.L"/> properties or the <see cref="F:DlibDotNet.LabPixel.A"/> properties or the <see cref="F:DlibDotNet.LabPixel.B"/> properties of <paramref name="left"/> and <paramref name="right"/> differ; otherwise, <code>false</code>.</returns>
        </member>
        <member name="T:DlibDotNet.RgbAlphaPixel">
            <summary>
            Represents an ARGB color value.
            </summary>
        </member>
        <member name="F:DlibDotNet.RgbAlphaPixel.Red">
            <summary>
            Gets or sets the red component of the color of this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.
            </summary>
            <value>The red component of the color of this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.RgbAlphaPixel.Green">
            <summary>
            Gets or sets the green component of the color of this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.
            </summary>
            <value>The green component of the color of this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.RgbAlphaPixel.Blue">
            <summary>
            Gets or sets the blue component of the color of this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.
            </summary>
            <value>The blue component of the color of this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.RgbAlphaPixel.Alpha">
            <summary>
            Gets or sets the alpha component of the color of this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.
            </summary>
            <value>The alpha component of the color of this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.</value>
        </member>
        <member name="M:DlibDotNet.RgbAlphaPixel.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.RgbAlphaPixel"/> class with the specified ARGB color value.
            </summary>
            <param name="alpha">The alpha component of the color.</param>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:DlibDotNet.RgbAlphaPixel.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:DlibDotNet.RgbAlphaPixel"/> contains the same ARGB color value as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:DlibDotNet.RgbAlphaPixel"/> and has the same ARGB color value as this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.RgbAlphaPixel.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:DlibDotNet.RgbAlphaPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.RgbAlphaPixel.op_Equality(DlibDotNet.RgbAlphaPixel,DlibDotNet.RgbAlphaPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.RgbAlphaPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.RgbAlphaPixel.Alpha"/>, <see cref="F:DlibDotNet.RgbAlphaPixel.Red"/>, <see cref="F:DlibDotNet.RgbAlphaPixel.Green"/> and <see cref="F:DlibDotNet.RgbAlphaPixel.Blue"/> properties of the two <see cref="T:DlibDotNet.RgbAlphaPixel"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.RgbAlphaPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.RgbAlphaPixel"/> to compare.</param>
            <returns><code>true</code> if the <see cref="F:DlibDotNet.RgbAlphaPixel.Alpha"/>, <see cref="F:DlibDotNet.RgbAlphaPixel.Red"/>, <see cref="F:DlibDotNet.RgbAlphaPixel.Green"/> and <see cref="F:DlibDotNet.RgbAlphaPixel.Blue"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.RgbAlphaPixel.op_Inequality(DlibDotNet.RgbAlphaPixel,DlibDotNet.RgbAlphaPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.RgbAlphaPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.RgbAlphaPixel.Alpha"/>, <see cref="F:DlibDotNet.RgbAlphaPixel.Red"/>, <see cref="F:DlibDotNet.RgbAlphaPixel.Green"/> or <see cref="F:DlibDotNet.RgbAlphaPixel.Blue"/> properties of the two <see cref="T:DlibDotNet.RgbAlphaPixel"/> objects are unequal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.RgbAlphaPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.RgbAlphaPixel"/> to compare.</param>
            <returns><code>true</code> if the values of either the <see cref="F:DlibDotNet.RgbAlphaPixel.Alpha"/> properties or the <see cref="F:DlibDotNet.RgbAlphaPixel.Red"/> properties or the <see cref="F:DlibDotNet.RgbAlphaPixel.Green"/> properties or the <see cref="F:DlibDotNet.RgbAlphaPixel.Blue"/> properties of <paramref name="left"/> and <paramref name="right"/> differ; otherwise, <code>false</code>.</returns>
        </member>
        <member name="T:DlibDotNet.RgbPixel">
            <summary>
            Represents an RGB color value.
            </summary>
        </member>
        <member name="F:DlibDotNet.RgbPixel.Red">
            <summary>
            Gets or sets the red component of the color of this <see cref="T:DlibDotNet.RgbPixel"/>.
            </summary>
            <value>The red component of the color of this <see cref="T:DlibDotNet.RgbPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.RgbPixel.Green">
            <summary>
            Gets or sets the green component of the color of this <see cref="T:DlibDotNet.RgbPixel"/>.
            </summary>
            <value>The green component of the color of this <see cref="T:DlibDotNet.RgbPixel"/>.</value>
        </member>
        <member name="F:DlibDotNet.RgbPixel.Blue">
            <summary>
            Gets or sets the blue component of the color of this <see cref="T:DlibDotNet.RgbPixel"/>.
            </summary>
            <value>The blue component of the color of this <see cref="T:DlibDotNet.RgbPixel"/>.</value>
        </member>
        <member name="M:DlibDotNet.RgbPixel.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.RgbPixel"/> class with the specified RGB color value.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:DlibDotNet.RgbPixel.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:DlibDotNet.RgbPixel"/> contains the same RGB color value as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:DlibDotNet.RgbPixel"/> and has the same RGB color value as this <see cref="T:DlibDotNet.RgbPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.RgbPixel.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:DlibDotNet.RgbPixel"/>.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:DlibDotNet.RgbPixel"/>.</returns>
        </member>
        <member name="M:DlibDotNet.RgbPixel.op_Equality(DlibDotNet.RgbPixel,DlibDotNet.RgbPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.RgbPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.RgbPixel.Red"/>, <see cref="F:DlibDotNet.RgbPixel.Green"/> and <see cref="F:DlibDotNet.RgbPixel.Blue"/> properties of the two <see cref="T:DlibDotNet.RgbPixel"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.RgbPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.RgbPixel"/> to compare.</param>
            <returns><code>true</code> if the <see cref="F:DlibDotNet.RgbPixel.Red"/>, <see cref="F:DlibDotNet.RgbPixel.Green"/> and <see cref="F:DlibDotNet.RgbPixel.Blue"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:DlibDotNet.RgbPixel.op_Inequality(DlibDotNet.RgbPixel,DlibDotNet.RgbPixel)">
            <summary>
            Compares two <see cref="T:DlibDotNet.RgbPixel"/> objects. The result specifies whether the values of the <see cref="F:DlibDotNet.RgbPixel.Red"/>, <see cref="F:DlibDotNet.RgbPixel.Green"/> or <see cref="F:DlibDotNet.RgbPixel.Blue"/> properties of the two <see cref="T:DlibDotNet.RgbPixel"/> objects are unequal.
            </summary>
            <param name="left">A <see cref="T:DlibDotNet.RgbPixel"/> to compare.</param>
            <param name="right">A <see cref="T:DlibDotNet.RgbPixel"/> to compare.</param>
            <returns><code>true</code> if the values of either the <see cref="F:DlibDotNet.RgbPixel.Red"/> properties or the <see cref="F:DlibDotNet.RgbPixel.Green"/> properties or the <see cref="F:DlibDotNet.RgbPixel.Blue"/> properties of <paramref name="left"/> and <paramref name="right"/> differ; otherwise, <code>false</code>.</returns>
        </member>
        <member name="T:DlibDotNet.MultilayerPerceptron`1">
            <summary>
            This class represents a multi layer perceptron network that is trained using the back propagation algorithm.
            </summary>
            <typeparam name="T">The type of kernel.</typeparam>
        </member>
        <member name="M:DlibDotNet.MultilayerPerceptron`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.MultilayerPerceptron`1"/> class with the specified nodes of input layer, nodes of first hidden layer, nodes of second hidden layer, nodes of output layer, alpha and momentum.
            </summary>
            <param name="nodesInInputLayer">The number of nodes for input layer.</param>
            <param name="nodesInFirstHiddenLayer">The number of nodes for first hidden layer.</param>
            <param name="nodesInSecondHiddenLayer">The number of nodes for second hidden layer.</param>
            <param name="nodesInOutputLayer">The number of nodes for output layer.</param>
            <param name="alpha">The learning rate. The default value is 0.1.</param>
            <param name="momentum">The momentum. The default value is 0.8.</param>
            <exception cref="T:System.NotSupportedException">The specified type of kernel does not supported.</exception>
        </member>
        <member name="M:DlibDotNet.MultilayerPerceptron`1.Operator(DlibDotNet.MatrixBase)">
            <summary>
            Returns the output of the network when it is given the input <paramref name="data"/>. The output's elements are always in the range of 0.0 to 1.0.
            </summary>
            <param name="data">The input data.</param>
            <returns>The output of the network.</returns>
            <exception cref="T:System.ArgumentException">The specified type of matrix is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="data"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.MultilayerPerceptron`1.Train(DlibDotNet.Matrix{System.Double},DlibDotNet.Matrix{System.Double})">
            <summary>
            This function trains the network that the correct output when given <paramref name="exampleIn"/> should be <paramref name="exampleOut"/>.
            </summary>
            <param name="exampleIn">The input of example.</param>
            <param name="exampleOut">The output of example.</param>
            <exception cref="T:System.ArgumentException">The specified type of kernel is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="exampleIn"/> or <paramref name="exampleOut"/>is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="exampleOut"/> must be 0.0 - 1.0.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="exampleIn"/> or <paramref name="exampleOut"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.MultilayerPerceptron`1.Train(DlibDotNet.Matrix{System.Double},System.Double)">
            <summary>
            This function trains the network that the correct output when given <paramref name="exampleIn"/> should be <paramref name="exampleOut"/>.
            </summary>
            <param name="exampleIn">The input of example.</param>
            <param name="exampleOut">The output of example.</param>
            <exception cref="T:System.ArgumentException">The specified type of kernel is not supported.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="exampleIn"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="exampleOut"/> must be 0.0 - 1.0.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="exampleIn"/> is disposed.</exception>
        </member>
        <member name="M:DlibDotNet.MultilayerPerceptron`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="F:DlibDotNet.NativeMethods.NativeLibrary">
            <summary>
            Native library file name.
            If Linux, it will be converted to  libDlibDotNetNative.so
            If MacOSX, it will be converted to  libDlibDotNetNative.dylib
            If Windows, it will be available after call LoadLibrary.
            And this file name must not contain period. If it does,
            CLR does not add extension (.dll) and CLR fails to load library
            </summary>
        </member>
        <member name="M:DlibDotNet.Pipe`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.ProxyDeserialize">
            <summary>
            Deserialize continuous objects from file.
            </summary>
        </member>
        <member name="M:DlibDotNet.ProxyDeserialize.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.ProxyDeserialize"/> class with the specified file path contains serialized data.
            </summary>
            <param name="path">The file path contains serialized data.</param>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> is not found.</exception>
        </member>
        <member name="M:DlibDotNet.ProxyDeserialize.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.ProxySerialize">
            <summary>
            Serialize continuous objects to file.
            </summary>
        </member>
        <member name="M:DlibDotNet.ProxySerialize.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.ProxySerialize"/> class with the specified file path contains serialized data.
            </summary>
            <param name="path">The file path contains serialized data.</param>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> is not found.</exception>
        </member>
        <member name="M:DlibDotNet.ProxySerialize.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Queue`1.Kernel1A.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Queue`1.Sort1BC.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Rand.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.SerializationException">
            <summary>
            The exception is general exception for serialization and deserialization on dlib. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:DlibDotNet.RunningStats`1">
            <summary>
            This class provides methods and properties to compute the running mean, variance, skewness, and excess kurtosis of a stream of real numbers.
            </summary>
            <typeparam name="TKernel">The type of real numbers.</typeparam>
        </member>
        <member name="M:DlibDotNet.RunningStats`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.RunningStats`1"/> class.
            </summary>
        </member>
        <member name="P:DlibDotNet.RunningStats`1.RunningStatsType">
            <summary>
            Gets the type of real numbers.
            </summary>
        </member>
        <member name="P:DlibDotNet.RunningStats`1.CurrentN">
            <summary>
            Gets the number of points given to this object so far.
            </summary>
        </member>
        <member name="P:DlibDotNet.RunningStats`1.ExcessKurtosis">
            <summary>
            Gets the unbiased sample kurtosis of all the values presented to this object so far.
            </summary>
        </member>
        <member name="P:DlibDotNet.RunningStats`1.Max">
            <summary>
            Gets the largest value presented to this object so far.
            </summary>
        </member>
        <member name="P:DlibDotNet.RunningStats`1.Mean">
            <summary>
            Gets the mean of all the values presented to this object so far.
            </summary>
        </member>
        <member name="P:DlibDotNet.RunningStats`1.Min">
            <summary>
            Gets the smallest value presented to this object so far.
            </summary>
        </member>
        <member name="P:DlibDotNet.RunningStats`1.Skewness">
            <summary>
            Gets the unbiased sample skewness of all the values presented to this object so far.
            </summary>
        </member>
        <member name="P:DlibDotNet.RunningStats`1.StdDev">
            <summary>
            Gets the unbiased sampled standard deviation of all the values presented to this object so far.
            </summary>
        </member>
        <member name="P:DlibDotNet.RunningStats`1.Variance">
            <summary>
            Gets the unbiased sample variance of all the values presented to this object so far.
            </summary>
        </member>
        <member name="M:DlibDotNet.RunningStats`1.Clear">
            <summary>
            Clears all points given to this object so far.
            </summary>
        </member>
        <member name="M:DlibDotNet.RunningStats`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:DlibDotNet.RunningStatsType">
            <summary>
            The RunningStatsType enumeration specifies the type of real numbers.
            </summary>
        </member>
        <member name="F:DlibDotNet.RunningStatsType.Float">
            <summary>
            32-bit floating-point values.
            </summary>
        </member>
        <member name="F:DlibDotNet.RunningStatsType.Double">
            <summary>
            64-bit floating-point values.
            </summary>
        </member>
        <member name="M:DlibDotNet.VectorNormalizer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DlibDotNet.RunningStats`1"/> class.
            </summary>
        </member>
        <member name="M:DlibDotNet.VectorNormalizer`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.StdString.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.StdVector`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.DecisionFunction`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.NormalizedFunction`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ProbabilisticDecisionFunction`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ProjectionFunction`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.KCentroid`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.HistogramIntersectionKernel`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.LinearKernel`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.PolynomialKernel`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.RadialBasisKernel`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.SigmoidKernel`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.KKMeans`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.Krls`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.SvmPegasos`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.BatchTrainer`3.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.ReducedDecisionFunctionTrainer2`3.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.StructuralObjectDetectionTrainer`1.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.SvmCTrainer`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.SvmNuTrainer`2.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.CustomMultithreadedObject.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:DlibDotNet.MultithreadedObject.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
